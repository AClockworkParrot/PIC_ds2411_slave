CCS PCB C Compiler, Version 4.068, 35766               07-мар-25 19:34

               Filename: main.lst

               ROM used: 142 words (55%)
                         Largest free fragment is 114
               RAM used: 5 (31%) at main() level
                         9 (56%) worst case
               Stack:    1 locations

*
0000:  MOVWF  05
0001:  GOTO   066
0002:  GOTO   00F
0003:  GOTO   006
0004:  GOTO   028
0005:  GOTO   055
.................... #include "C:\PIC_projects\ds2411_v2\main.h" 
.................... #include <10F220.h> 
.................... //////// Standard Header file for the PIC10F220 device //////////////// 
.................... #device PIC10F220 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOMCPU                   //Master Clear Pull-up disabled 
.................... #FUSES IOSC8                    //INTOSC speed 8MHz 
....................  
.................... #use delay(clock=8000000) 
*
0055:  MOVF   14,W
0056:  BTFSC  03.2
0057:  GOTO   065
0058:  MOVLW  02
0059:  MOVWF  11
005A:  CLRF   10
005B:  DECFSZ 10,F
005C:  GOTO   05B
005D:  DECFSZ 11,F
005E:  GOTO   05A
005F:  MOVLW  97
0060:  MOVWF  10
0061:  DECFSZ 10,F
0062:  GOTO   061
0063:  DECFSZ 14,F
0064:  GOTO   058
0065:  GOTO   092 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B0,rcv=PIN_B0,bits=8) 
....................  
....................  
.................... #include "config.h" 
.................... /* 
....................  *    config.h 
....................  * 
....................  *    created: April 2011 
....................  *    author: Bartek Fabiszewski (www.fabiszewski.net) 
....................  */ 
....................  
.................... #ifndef CONFIG_H_ 
.................... #define CONFIG_H_ 
....................  
.................... #define drive_OW_low() { SET_TRIS_B(0b11111110); OUTPUT_LOW(PIN_B0); } 
.................... #define drive_OW_high() { SET_TRIS_B(0b11111111);} 
.................... #define OW_presence_pulse() {\ 
.................... drive_OW_low();  \ 
.................... delay_us(120); \ 
.................... drive_OW_high(); \ 
.................... } 
....................  
.................... #define _XTAL_FREQ    8000000 // 4MHz 
....................  
.................... // leave uncommented only necessary module 
.................... // only one module may be compiled into hex due to PIC code space limits 
.................... #define SHT1x     // leave uncommented if you have sht2x sensor supporting i2c connected to pic 
....................  
.................... //#define TRUE                1 
.................... //#define FALSE               0 
.................... #define INPUT               1 
.................... #define OUTPUT              0 
.................... #define HIGH                1 
.................... #define LOW                 0 
....................  
.................... #define OW                  PIN_B0          //pin 6 for 1-wire data (this can't be changed) 
.................... #define TRIS_OW             TRISB0 
....................  
.................... #define MOD1                             //my first design used different pins 
....................  
.................... #ifdef MOD1 
.................... #define DATA                RB6          //pin 12 for sht data 
.................... #define SCK                 RB7          //pin 13 for sht clock 
.................... #define TRIS_DATA           TRISB6 
.................... #define TRIS_SCK            TRISB7 
....................  
.................... // some global vars 
.................... //byte ow_error;      // error on ow line 
.................... ///byte sensor_error;  // error on sensor line 
.................... ///byte scratchpad[6]; // 6-byte buffer [h-msb h-lsb h-crc t-msb t-lsb t-crc] 
....................  
....................  
....................  
.................... //#include "sht1x.h" 
....................  
....................  
.................... #endif /* CONFIG_H_ */ 
....................  
....................  
.................... byte const m[8] = {0x01, 0xE0, 0x65, 0x72, 0x11, 0x00, 0x00, 0xA3};  // serial number sequence 
....................  
....................  
.................... // func for detect reset pulse 
.................... /*byte OW_reset_pulse (void) 
.................... { 
....................    byte del_count = 50; 
....................    while (del_count--) 
....................    { 
....................       delay_us(10); 
....................       if (OW) 
....................       { 
....................          break; 
....................       } 
....................      
....................    } 
....................    if (del_count > 40)  
....................    { 
....................       return 0; 
....................    } 
....................    return 1; 
.................... } 
.................... */ 
....................  
....................  
.................... byte OW_reset_pulse (void) 
.................... {byte del_count = 50;    while (del_count--)  
*
000F:  MOVLW  32
0010:  MOVWF  14
....................     { 
0011:  MOVF   14,W
0012:  DECF   14,F
0013:  XORLW  00
0014:  BTFSC  03.2
0015:  GOTO   01D
....................         delay_us(10); 
0016:  MOVLW  06
0017:  MOVWF  10
0018:  DECFSZ 10,F
0019:  GOTO   018
001A:  NOP
....................         if (OW)          
....................         { 
....................             break; 
001B:  GOTO   01D
....................         } 
....................     } 
001C:  GOTO   011
....................     return (del_count < 40); // ?????? 1, ???? ??????? ?????????? ????? 
001D:  MOVLW  27
001E:  MOVWF  10
001F:  MOVF   14,W
0020:  SUBWF  10,W
0021:  BTFSC  03.0
0022:  GOTO   025
0023:  MOVLW  00
0024:  GOTO   026
0025:  MOVLW  01
0026:  MOVWF  11
.................... } 
0027:  GOTO   077 (RETURN)
....................  
....................  
....................  
....................  
.................... // 1-wire slave write bit 
.................... // must be run immediately after line is pulled down by master 
.................... void OW_write_bit (byte write_bit) 
.................... { 
....................     if (write_bit) 
*
0034:  MOVF   18,F
0035:  BTFSC  03.2
0036:  GOTO   03D
....................     { 
....................         //writing a bit '1' 
....................         delay_us(55);//55                // bus is already pulled high by pullup resistor, so just wait 
0037:  MOVLW  24
0038:  MOVWF  10
0039:  DECFSZ 10,F
003A:  GOTO   039
003B:  NOP
....................     } 
....................     else 
003C:  GOTO   04F
....................     { 
....................         //writing a bit '0' 
....................         drive_OW_low();                    // drive the bus low 
003D:  MOVLW  FE
003E:  TRIS   6
003F:  MOVWF  12
0040:  BCF    12.0
0041:  MOVF   12,W
0042:  TRIS   6
0043:  BCF    06.0
....................         delay_us(17);//15 
0044:  MOVLW  0B
0045:  MOVWF  10
0046:  DECFSZ 10,F
0047:  GOTO   046
....................         drive_OW_high();                   // release the bus 
0048:  MOVLW  FF
0049:  TRIS   6
004A:  MOVWF  12
....................         delay_us(35);//35 
004B:  MOVLW  17
004C:  MOVWF  10
004D:  DECFSZ 10,F
004E:  GOTO   04D
....................     } 
.................... } 
....................  
.................... // func for write bytes 
.................... void OW_write_byte (byte write_data) 
.................... { 
.................... byte a; 
.................... for (a = 0; a < 8; a++) { 
*
0028:  CLRF   16
0029:  MOVLW  07
002A:  MOVWF  10
002B:  MOVF   16,W
002C:  SUBWF  10,W
002D:  BTFSS  03.0
002E:  GOTO   054
....................       OW_write_bit(write_data & 0x01);   
002F:  MOVF   15,W
0030:  ANDLW  01
0031:  MOVWF  17
0032:  MOVF   17,W
0033:  MOVWF  18
....................       while (OW); 
*
004F:  GOTO   04F
....................       write_data >>= 1; 
0050:  BCF    03.0
0051:  RRF    15,F
....................       } 
0052:  INCF   16,F
0053:  GOTO   029
.................... } 
0054:  GOTO   08C (RETURN)
....................  
.................... //timeout HIGH frezzy 
.................... byte OW_wait_idle(byte timeout) 
.................... { 
....................    while (OW){ 
....................       if (--timeout == 0) return 0; 
....................       delay_us(1); 
....................     } 
....................     return 1; 
.................... } 
....................  
.................... void main() 
.................... { 
*
0066:  CLRF   04
0067:  BCF    12.0
0068:  MOVF   12,W
0069:  TRIS   6
006A:  BSF    06.0
.................... byte i; 
....................     // Initialization 
....................     //  setup_timer_0(RTCC_INTERNAL | RTCC_DIV_1); // Configure Timer 0 
....................     //   SET_TRIS_B(0xFF); // Configure port B as input 
....................     SETUP_WDT(WDT_2304MS); // Configure Watchdog Timer 
*
006D:  MOVLW  0F
006E:  MOVWF  10
006F:  MOVLW  07
0070:  CLRF   01
0071:  MOVLW  0F
0072:  OPTION
0073:  CLRWDT
0074:  MOVF   10,W
0075:  OPTION
....................  
....................     while (TRUE) { 
....................         // Periodic code execution, similar to interrupts 
....................         
....................          
....................         // Check for reset and reset 1-Wire device 
....................         if (OW_reset_pulse()) {  // if reset pulse detected 
0076:  GOTO   002
0077:  MOVF   11,F
0078:  BTFSC  03.2
0079:  GOTO   08E
....................             delay_us(30); // эмпирически подобрать задержку 
007A:  MOVLW  13
007B:  MOVWF  10
007C:  DECFSZ 10,F
007D:  GOTO   07C
007E:  GOTO   07F
....................         for ( i = 0; i < 8; i++) {  // Loop over the array length 
007F:  CLRF   13
0080:  MOVLW  07
0081:  MOVWF  10
0082:  MOVF   13,W
0083:  SUBWF  10,W
0084:  BTFSS  03.0
0085:  GOTO   08E
....................     
....................         while (OW); // Wait for 1-Wire to be idle 
0086:  GOTO   086
....................     
....................         OW_write_byte(m[i]); // Send the byte 
0087:  MOVF   13,W
0088:  CALL   006
0089:  MOVWF  14
008A:  MOVWF  15
008B:  GOTO   004
....................         } 
008C:  INCF   13,F
008D:  GOTO   080
....................    } 
....................          
....................      //   Watchdog Timer handling 
....................         RESTART_WDT(); 
008E:  CLRWDT
....................         delay_ms(100); // Delay 0.1 s * 10 = 1 s 
008F:  MOVLW  64
0090:  MOVWF  14
0091:  GOTO   005
....................     }} 
0092:  GOTO   076
....................  
0093:  SLEEP

Configuration Fuses:
   Word  1: 0FEB   NOMCLR NOPROTECT NOWDT NOMCPU IOSC8
